from statistics import mode
from turtle import width
import unittest

import numpy as np
# from sympy import true

import pyECSS.utilities as util
from pyECSS.Entity import Entity
# from pyECSS.Component import BasicTransform, Camera, RenderMesh
from pyECSS.Component import VectorQuaternion_BasicTransformDecorator, Camera, RenderMesh
from pyECSS.System import System, TransformSystem, CameraSystem, RenderSystem
from pyGLV.GL.Scene import Scene
from pyECSS.ECSSManager import ECSSManager
from pyGLV.GUI.Viewer import SDL2Window, ImGUIDecorator, RenderGLStateSystem
from pyECSS.quaternion import Quaternion

from pyGLV.GL.Shader import InitGLShaderSystem, Shader, ShaderGLDecorator, RenderGLShaderSystem
from pyGLV.GL.VertexArray import VertexArray

from OpenGL.GL import GL_LINES

import OpenGL.GL as gl




"""
Common setup for all unit tests

Scenegraph for unit tests:

root
    |---------------------------|           
    entityCam1,                 node4,      
    |-------|                    |--------------|----------|--------------|           
    trans1, entityCam2           trans4,        mesh4,     shaderDec4     vArray4
            |                               
            ortho, trans2                   
                                                        
                                                        
    
"""


s1 = Scene()
scene = Scene()    
# assertEqual(s1, scene)

# Scenegraph with Entities, Components
rootEntity = scene.world.createEntity(Entity(name="RooT"))
entityCam1 = scene.world.createEntity(Entity(name="entityCam1"))
scene.world.addEntityChild(rootEntity, entityCam1)
# trans1 = scene.world.addComponent(entityCam1, BasicTransform(name="trans1", trs=util.identity()))
quat = Quaternion(0,0,0,1)
trans1 = scene.world.addComponent(entityCam1, VectorQuaternion_BasicTransformDecorator(name="trans1", q=quat))

entityCam2 = scene.world.createEntity(Entity(name="entityCam2"))
scene.world.addEntityChild(entityCam1, entityCam2)
# trans2 = scene.world.addComponent(entityCam2, BasicTransform(name="trans2", trs=util.identity()))
trans2 = scene.world.addComponent(entityCam2, VectorQuaternion_BasicTransformDecorator(name="trans2", q=quat))
orthoCam = scene.world.addComponent(entityCam2, Camera(util.ortho(-100.0, 100.0, -100.0, 100.0, 1.0, 100.0), "orthoCam","Camera","500"))

node4 = scene.world.createEntity(Entity(name="node4"))
scene.world.addEntityChild(rootEntity, node4)
# trans4 = scene.world.addComponent(node4, BasicTransform(name="trans4", trs=util.identity()))
trans4 = scene.world.addComponent(node4, VectorQuaternion_BasicTransformDecorator(name="trans4", q=quat))
mesh4 = scene.world.addComponent(node4, RenderMesh(name="mesh4"))


axes = scene.world.createEntity(Entity(name="axes"))
scene.world.addEntityChild(rootEntity, axes)
# axes_trans = scene.world.addComponent(axes, BasicTransform(name="axes_trans", trs=util.identity()))
axes_trans = scene.world.addComponent(axes, VectorQuaternion_BasicTransformDecorator(name="axes_trans", q=quat))
axes_mesh = scene.world.addComponent(axes, RenderMesh(name="axes_mesh"))

# a simple triangle
vertexData = np.array([
    [0.0, 0.0, 0.0, 1.0],
    [0.5, 1.0, 0.0, 1.0],
    [1.0, 0.0, 0.0, 1.0]
],dtype=np.float32) 
colorVertexData = np.array([
    [1.0, 0.0, 0.0, 0.0],
    [0.0, 1.0, 0.0, 1.0],
    [0.0, 0.0, 1.0, 1.0]
], dtype=np.float32)

#Colored Axes
vertexAxes = np.array([
    [0.0, 0.0, 0.0, 1.0],
    [1.0, 0.0, 0.0, 1.0],
    [0.0, 0.0, 0.0, 1.0],
    [0.0, 1.0, 0.0, 1.0],
    [0.0, 0.0, 0.0, 1.0],
    [0.0, 0.0, 1.0, 1.0]
],dtype=np.float32) 
colorAxes = np.array([
    [1.0, 0.0, 0.0, 1.0],
    [1.0, 0.0, 0.0, 1.0],
    [0.0, 1.0, 0.0, 1.0],
    [0.0, 1.0, 0.0, 1.0],
    [0.0, 0.0, 1.0, 1.0],
    [0.0, 0.0, 1.0, 1.0]
], dtype=np.float32)

#Simple Cube
vertexCube = np.array([
    [-0.5, -0.5, 0.5, 1.0],
    [-0.5, 0.5, 0.5, 1.0],
    [0.5, 0.5, 0.5, 1.0],
    [0.5, -0.5, 0.5, 1.0], 
    [-0.5, -0.5, -0.5, 1.0], 
    [-0.5, 0.5, -0.5, 1.0], 
    [0.5, 0.5, -0.5, 1.0], 
    [0.5, -0.5, -0.5, 1.0]
],dtype=np.float32) 
colorCube = np.array([
    [0.0, 0.0, 0.0, 1.0],
    [1.0, 0.0, 0.0, 1.0],
    [1.0, 1.0, 0.0, 1.0],
    [0.0, 1.0, 0.0, 1.0],
    [0.0, 0.0, 1.0, 1.0],
    [1.0, 0.0, 1.0, 1.0],
    [1.0, 1.0, 1.0, 1.0],
    [0.0, 1.0, 1.0, 1.0]
], dtype=np.float32)

#index arrays for above vertex Arrays
index = np.array((0,1,2), np.uint32) #simple triangle
indexAxes = np.array((0,1,2,3,4,5), np.uint32) #3 simple colored Axes as R,G,B lines
indexCube = np.array((1,0,3, 1,3,2, 
                    2,3,7, 2,7,6,
                    3,0,4, 3,4,7,
                    6,5,1, 6,1,2,
                    4,5,6, 4,6,7,
                    5,4,0, 5,0,1), np.uint32) #rhombus out of two triangles



# Systems
transUpdate = scene.world.createSystem(TransformSystem("transUpdate", "TransformSystem", "001"))
camUpdate = scene.world.createSystem(CameraSystem("camUpdate", "CameraUpdate", "200"))
renderUpdate = scene.world.createSystem(RenderGLShaderSystem())
initUpdate = scene.world.createSystem(InitGLShaderSystem())

####################################################################################################
####################################################################################################
####################################################################################################
# def test_renderAxesTerrainEVENT(self):
#         """
#         First time to test a RenderSystem in a Scene with Shader and VertexArray components
#         """
#         print("TestScene:test_render START".center(100, '-'))
        
        


model = util.translate(0.0,0.0,0.0)
eye = util.vec(2.5, 2.5, 2.5)
target = util.vec(0.0, 0.0, 0.0)
up = util.vec(0.0, 1.0, 0.0)
view = util.lookat(eye, target, up)

# projMat = util.ortho(-10.0, 10.0, -10.0, 10.0, -1.0, 10.0)
projMat = util.perspective(90.0, 1.33, 0.1, 100)
# projMat = util.perspective(90.0, 1, 0.01, 100.0) 



# mvpMat =  projMat @ view @ model

shaderDec4 = scene.world.addComponent(node4, ShaderGLDecorator(Shader(vertex_source = Shader.COLOR_VERT_MVP, fragment_source=Shader.COLOR_FRAG)))
# self.shaderDec4.setUniformVariable(key='modelViewProj', value=mvpMat, mat4=True)

from pyGLV.GL.terrain import generateTerrain
vertexTerrain, indexTerrain, colorTerrain= generateTerrain(size=2,N=20)



# # attach terrain data to the RenderMesh
mesh4.vertex_attributes.append(vertexTerrain) 
mesh4.vertex_attributes.append(colorTerrain)
mesh4.vertex_index.append(indexTerrain)
# self.vArray4 = self.scene.world.addComponent(self.node4, VertexArray())
vArray4 = scene.world.addComponent(node4, VertexArray(primitive=GL_LINES))


## ADD AXES TO THIS MESH ##
axes = scene.world.createEntity(Entity(name="axes"))
scene.world.addEntityChild(rootEntity, axes)
# axes_trans = scene.world.addComponent(axes, BasicTransform(name="axes_trans", trs=util.identity()))
axes_trans = scene.world.addComponent(axes, VectorQuaternion_BasicTransformDecorator(name="axes_trans", q=quat))
axes_mesh = scene.world.addComponent(axes, RenderMesh(name="axes_mesh"))



axes_mesh.vertex_attributes.append(vertexAxes) 
axes_mesh.vertex_attributes.append(colorAxes)
axes_mesh.vertex_index.append(indexAxes)
axes_vArray = scene.world.addComponent(axes, VertexArray(primitive=GL_LINES)) # note the primitive change

# self.shaderDec_axes = self.scene.world.addComponent(self.axes, Shader())
# OR
shaderDec42 = scene.world.addComponent(axes, ShaderGLDecorator(Shader(vertex_source = Shader.COLOR_VERT_MVP, fragment_source=Shader.COLOR_FRAG)))
# self.shaderDec42.setUniformVariable(key='modelViewProj', value=mvpMat, mat4=True)


running = True
# MAIN RENDERING LOOP
scene.init(imgui=True, windowWidth = 1024, windowHeight = 768, windowTitle = "pyglGA test_renderAxesTerrainEVENT")

# pre-pass scenegraph to initialise all GL context dependent geometry, shader classes
# needs an active GL context


scene.world.traverse_visit(initUpdate, scene.world.root)

################### EVENT MANAGER 
# instantiate new EventManager
# need to pass that instance to all event publishers e.g. ImGUIDecorator
eManager = scene.world.eventManager
gWindow = scene.renderWindow
gGUI = scene.gContext

renderGLEventActuator = RenderGLStateSystem()

#setup Events and add them to the EventManager
# updateTRS = Event(name="OnUpdateTRS", id=100, value=None)
# updateBackground = Event(name="OnUpdateBackground", id=200, value=None)
# #updateWireframe = Event(name="OnUpdateWireframe", id=201, value=None)


# eManager._events[updateTRS.name] = updateTRS
# eManager._events[updateBackground.name] = updateBackground
#eManager._events[updateWireframe.name] = updateWireframe # this is added inside ImGUIDecorator

# Add RenderWindow to the EventManager subscribers
# @GPTODO
# values of these Dicts below should be List items, not objects only 
#   use subscribe(), publish(), actuate() methhods
#
# eManager._subscribers[updateTRS.name] = gGUI
# eManager._subscribers[updateBackground.name] = gGUI

eManager._subscribers['OnUpdateWireframe'] = gWindow
eManager._actuators['OnUpdateWireframe'] = renderGLEventActuator
eManager._subscribers['OnUpdateCamera'] = gWindow 
eManager._actuators['OnUpdateCamera'] = renderGLEventActuator
# MANOS END
# Add RenderWindow to the EventManager publishers
# eManager._publishers[updateBackground.name] = gGUI

gWindow._myCamera = view
mvpMat = projMat @ view @ model

while running:
    running = scene.render(running)
    scene.world.traverse_visit(renderUpdate, scene.world.root)
    view = gWindow._myCamera
    mvpMat = projMat @ view @ model
    shaderDec4.setUniformVariable(key='modelViewProj', value=mvpMat, mat4=True)
    shaderDec42.setUniformVariable(key='modelViewProj', value=mvpMat, mat4=True)
    scene.render_post()
    
scene.shutdown()

# print("TestScene:test_renderAxesTerrainEVENT END".center(100, '-'))

####################################################################################################
####################################################################################################
####################################################################################################    
